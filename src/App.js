import React, { useState, useEffect } from "react";
import { db } from "./firebaseConfig"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Firebase config
import { collection, addDoc, getDocs, updateDoc, deleteDoc, doc } from "firebase/firestore";
import { query, where } from "firebase/firestore";
import './App.css';  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
import axios from "axios";

const BookingPage = () => {
  const [phone, setPhone] = useState("");
  const [name, setName] = useState("");
  const [barber, setBarber] = useState("");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");
  const [bookings, setBookings] = useState([]);
  const [editId, setEditId] = useState(null);
  const barbers = ["‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏µ", "‡∏ä‡πà‡∏≤‡∏á‡∏Å‡∏µ‡∏°", "‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏∏‡∏´"];

  useEffect(() => {
    const savedPhone = localStorage.getItem("userPhone");
    if (savedPhone) {
      setPhone(savedPhone);
      fetchBookings(savedPhone);
    }
  }, []);

  const fetchBookings = async (userPhone) => {
    if (!userPhone) return;
    const q = query(collection(db, "bookings"), where("phone", "==", userPhone));
    const querySnapshot = await getDocs(q);
    setBookings(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
  };

  const handleBooking = async () => {
    if (!name || !phone || !barber || !date || !time) {
        alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
        return;
    }

    const selectedTime = new Date(`${date}T${time}`);
    const q = query(collection(db, "bookings"), where("barber", "==", barber), where("date", "==", date));
    const querySnapshot = await getDocs(q);
    let isOverlap = false;

    querySnapshot.forEach((doc) => {
        const bookedTime = new Date(`${doc.data().date}T${doc.data().time}`);
        const timeDiff = Math.abs((selectedTime - bookedTime) / (1000 * 60));
        if (timeDiff < 40) isOverlap = true;
    });

    if (isOverlap && !editId) {
        alert("‚õî ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô");
        return;
    }

    if (editId) {
        await handleUpdate(editId);
    } else {
        await addDoc(collection(db, "bookings"), { name, phone, barber, date, time });

        const adminDashboardURL = "http://localhost:5000/admin";
        const text = `üîî *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà* üîî\n\nüìå *‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:* ${name}\nüìû *‡πÄ‡∏ö‡∏≠‡∏£‡πå:* ${phone}\nüíà *‡∏ä‡πà‡∏≤‡∏á:* ${barber}\nüìÖ *‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:* ${date}\nüïí *‡πÄ‡∏ß‡∏•‡∏≤:* ${time}\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö üîç\nüìç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: 
${adminDashboardURL}`;

        try {
            console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE...");
            await axios.post("http://localhost:5000/send-line-notify", { message: text });
            console.log("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        } catch (error) {
            console.error("‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
        }

        alert("‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß");
    }

    fetchBookings(phone);
    setName("");
    setPhone("");
    setBarber("");
    setDate("");
    setTime("");
    setEditId(null);
};

const handleUpdate = async (id) => {
    const selectedTime = new Date(`${date}T${time}`);

    const q = query(
        collection(db, "bookings"),
        where("barber", "==", barber),
        where("date", "==", date)
    );

    const querySnapshot = await getDocs(q);
    let isOverlap = false;

    querySnapshot.forEach((doc) => {
        if (doc.id !== id) {
            const bookedTime = new Date(`${doc.data().date}T${doc.data().time}`);
            const timeDiff = Math.abs((selectedTime - bookedTime) / (1000 * 60));

            if (timeDiff < 40) {
                isOverlap = true;
            }
        }
    });

    if (isOverlap) {
        alert("‚õî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô");
        return;
    }

    const bookingRef = doc(db, "bookings", id);
    await updateDoc(bookingRef, { name, phone, barber, date, time });
    const adminDashboardURL = "http://localhost:5000/admin";
    const text = `‚úèÔ∏è *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á* ‚úèÔ∏è\n\nüìå *‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:* ${name}\nüìû *‡πÄ‡∏ö‡∏≠‡∏£‡πå:* ${phone}\nüíà *‡∏ä‡πà‡∏≤‡∏á:* ${barber}\nüìÖ *‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:* ${date}\nüïí *‡πÄ‡∏ß‡∏•‡∏≤:* ${time}\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á üîç\nüìç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: 
${adminDashboardURL}`;

    try {
        console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE...");
        await axios.post("http://localhost:5000/send-line-notify", { message: text });
        console.log("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
        console.error("‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    }

    alert("‚úèÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß");
    setEditId(null);
    fetchBookings(phone);
};
  
  

  const handleDelete = async (id) => {
    await deleteDoc(doc(db, "bookings", id));
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏≠‡∏á ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
    setBookings(prevBookings => prevBookings.filter(booking => booking.id !== id));
  
    alert("‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  };
  

  const handleEdit = (b) => {
    setName(b.name);
    setPhone(b.phone);
    setBarber(b.barber);
    setDate(b.date);
    setTime(b.time);
    setEditId(b.id);
  };

  return (
    <div className="container">
      <h1>
      <img src="/Barber.jpeg" className="logo" alt="" />

        ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏±‡∏î‡∏ú‡∏°
      </h1>

      <div className="form-container">
        <input 
          type="text" 
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" 
          value={name} 
          onChange={(e) => setName(e.target.value)} 
          className="input-field"
        />

        <input 
          type="text" 
          placeholder="üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" 
          value={phone} 
          onChange={(e) => setPhone(e.target.value)} 
          className="input-field"
        />

        <select 
          value={barber} 
          onChange={(e) => setBarber(e.target.value)} 
          className="input-field"
        >
          <option value="">‚úÇÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≤‡∏á</option>
          {barbers.map((b, index) => <option key={index} value={b}>{b}</option>)}
        </select>

        <input 
          type="date" 
          value={date} 
          onChange={(e) => setDate(e.target.value)} 
          className="input-field"
        />

        <input 
          type="time" 
          value={time} 
          onChange={(e) => setTime(e.target.value)} 
          className="input-field"
        />

        <button 
          onClick={handleBooking} 
          className="submit-button"
        >
          ‚úÖ {editId ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"}
        </button>
      </div>
      
      <br />
<input 
  type="text" 
  placeholder="üìû ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" 
  value={phone} 
  onChange={(e) => {
    const input = e.target.value.replace(/\D/g, ""); // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if (input.length <= 10) {
      setPhone(input);
    }
  }}  
  className="input-field"
/>
<br /><br />
<button 
  onClick={() => {
    if (!phone || phone.length < 9) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }
    localStorage.setItem("userPhone", phone);
    fetchBookings(phone);
  }} 
  className="submit-button"
>
  üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
</button>
      <h2>üìú ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h2>

      <div className="booking-list">
        {bookings.length === 0 ? (
          <p className="no-booking-text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</p>
        ) : (
          bookings.map((b) => (
            <div key={b.id} className="booking-item">
              <div>
                <p>{b.name} - {b.phone} - {b.barber}</p>
                <p>{b.date} | {b.time}</p>
              </div>
              <div className="booking-actions">
                <button 
                  onClick={() => handleEdit(b)} 
                  className="edit-button"
                >
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
                <button 
                  onClick={() => handleDelete(b.id)} 
                  className="delete-button"
                >
                  ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default BookingPage;
